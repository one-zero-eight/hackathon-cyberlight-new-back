"""general_one

Revision ID: aa905a57865a
Revises: 
Create Date: 2023-12-08 20:18:28.106854

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "aa905a57865a"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "achievement",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("image", sa.String(), nullable=True),
        sa.Column("icon", sa.String(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "battle_pass",
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "lessons",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("alias", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("content", sa.String(), nullable=False),
        sa.Column("difficulty", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("alias"),
    )
    op.create_index(op.f("ix_lessons_id"), "lessons", ["id"], unique=False)
    op.create_table(
        "level",
        sa.Column("experience", sa.Integer(), nullable=False),
        sa.Column("value", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "reward",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("content", sa.String(), nullable=False),
        sa.Column("type", sa.Enum("NONE", "XP", "ITEM", name="rewardtype"), nullable=False),
        sa.Column("image", sa.String(), nullable=True),
        sa.Column("icon", sa.String(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "tasks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("alias", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("content", sa.String(), nullable=False),
        sa.Column(
            "type", sa.Enum("empty", "instant", "radio", "multichoice", "input", name="steptype"), nullable=False
        ),
        sa.Column("choices", postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column("correct_choices", postgresql.ARRAY(sa.Integer()), nullable=True),
        sa.Column("input_answers", postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column("reward", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("alias"),
    )
    op.create_index(op.f("ix_tasks_id"), "tasks", ["id"], unique=False)
    op.create_table(
        "users",
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("login", sa.String(), nullable=False),
        sa.Column("password_hash", sa.String(), nullable=False),
        sa.Column("role", sa.Enum("DEFAULT", "ADMIN", name="userrole"), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("login"),
    )
    op.create_table(
        "battle_pass_levels",
        sa.Column("battle_pass_id", sa.Integer(), nullable=False),
        sa.Column("level_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["battle_pass_id"],
            ["battle_pass.id"],
        ),
        sa.ForeignKeyConstraint(
            ["level_id"],
            ["level.id"],
        ),
        sa.PrimaryKeyConstraint("battle_pass_id", "level_id"),
    )
    op.create_table(
        "level_rewards",
        sa.Column("level_id", sa.Integer(), nullable=False),
        sa.Column("reward_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["level_id"],
            ["level.id"],
        ),
        sa.ForeignKeyConstraint(
            ["reward_id"],
            ["reward.id"],
        ),
        sa.PrimaryKeyConstraint("level_id", "reward_id"),
    )
    op.create_table(
        "personal_account",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id"),
    )
    op.create_table(
        "task_association",
        sa.Column("test_id", sa.Integer(), nullable=False),
        sa.Column("task_id", sa.Integer(), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["tasks.id"],
        ),
        sa.ForeignKeyConstraint(
            ["test_id"],
            ["lessons.id"],
        ),
        sa.PrimaryKeyConstraint("test_id", "task_id"),
    )
    op.create_table(
        "task_rewards",
        sa.Column("task_id", sa.Integer(), nullable=False),
        sa.Column("reward_id", sa.Integer(), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["reward_id"],
            ["reward.id"],
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["tasks.id"],
        ),
        sa.PrimaryKeyConstraint("task_id", "reward_id"),
    )
    op.create_table(
        "personal_account_achievements",
        sa.Column("personal_account_id", sa.Integer(), nullable=False),
        sa.Column("achievement_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["achievement_id"],
            ["achievement.id"],
        ),
        sa.ForeignKeyConstraint(
            ["personal_account_id"],
            ["personal_account.user_id"],
        ),
        sa.PrimaryKeyConstraint("personal_account_id", "achievement_id"),
    )
    op.create_table(
        "personal_account_battle_passes",
        sa.Column("battle_pass_id", sa.Integer(), nullable=False),
        sa.Column("personal_account_id", sa.Integer(), nullable=False),
        sa.Column("experience", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["battle_pass_id"],
            ["battle_pass.id"],
        ),
        sa.ForeignKeyConstraint(
            ["personal_account_id"],
            ["personal_account.user_id"],
        ),
        sa.PrimaryKeyConstraint("battle_pass_id", "personal_account_id"),
    )
    op.create_table(
        "personal_account_rewards",
        sa.Column("reward_id", sa.Integer(), nullable=False),
        sa.Column("personal_account_id", sa.Integer(), nullable=False),
        sa.Column("count", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["personal_account_id"],
            ["personal_account.user_id"],
        ),
        sa.ForeignKeyConstraint(
            ["reward_id"],
            ["reward.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("personal_account_rewards")
    op.drop_table("personal_account_battle_passes")
    op.drop_table("personal_account_achievements")
    op.drop_table("task_rewards")
    op.drop_table("task_association")
    op.drop_table("personal_account")
    op.drop_table("level_rewards")
    op.drop_table("battle_pass_levels")
    op.drop_table("users")
    op.drop_index(op.f("ix_tasks_id"), table_name="tasks")
    op.drop_table("tasks")
    op.drop_table("reward")
    op.drop_table("level")
    op.drop_index(op.f("ix_lessons_id"), table_name="lessons")
    op.drop_table("lessons")
    op.drop_table("battle_pass")
    op.drop_table("achievement")
    # ### end Alembic commands ###
